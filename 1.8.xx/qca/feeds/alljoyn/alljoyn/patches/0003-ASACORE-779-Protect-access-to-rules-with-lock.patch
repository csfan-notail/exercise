From 5942cfc8ee567ceb5cf5b837ae5e7d3189d64e8b Mon Sep 17 00:00:00 2001
From: Todd Malsbary <tmalsbar@qce.qualcomm.com>
Date: Thu, 31 Jul 2014 14:57:41 -0700
Subject: [PATCH 3/4] ASACORE-779: Protect access to rules with lock.

Change-Id: I612efc594ee8851609e98866b549cd57ff1fd2bb
Signed-off-by: Todd Malsbary <tmalsbar@qce.qualcomm.com>
---
 alljoyn_core/router/SessionlessObj.cc | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/alljoyn_core/router/SessionlessObj.cc b/alljoyn_core/router/SessionlessObj.cc
index a087fa2..e092e32 100644
--- a/alljoyn_core/router/SessionlessObj.cc
+++ b/alljoyn_core/router/SessionlessObj.cc
@@ -326,14 +326,14 @@ void SessionlessObj::AddRule(const qcc::String& epName, Rule& rule)
         uint32_t toChangeId = curChangeId + 1;
         uint32_t toRulesId = nextRulesId;
 
-        lock.Unlock();
-        router.UnlockNameTable();
-
         /* Retrieve from our own cache */
         HandleRangeRequest(epName.c_str(), 0, fromChangeId, toChangeId, fromRulesId, toRulesId);
 
         bus.EnableConcurrentCallbacks();
         FindAdvertisedNames();
+
+        lock.Unlock();
+        router.UnlockNameTable();
     }
 }
 
@@ -1428,6 +1428,8 @@ bool SessionlessObj::ResponseHandler(TransportMask transport, MDNSPacket respons
      * Next step is to see if the response matches any of our rules.  If it
      * does, then report the name as found.
      */
+    router.LockNameTable();
+    lock.Lock();
     for (RuleIterator rit = rules.begin(); rit != rules.end(); ++rit) {
         Rule& rule = rit->second;
         if (rule.iface != "org.alljoyn.About") {
@@ -1458,6 +1460,8 @@ bool SessionlessObj::ResponseHandler(TransportMask transport, MDNSPacket respons
             FoundAdvertisedNameHandler(name.c_str(), transport, name.c_str(), unsolicited);
         }
     }
+    lock.Unlock();
+    router.UnlockNameTable();
 
     /* Always return false since we're just sniffing for org.alljoyn.About.sl. advertisements */
     return false;
-- 
1.9.1

