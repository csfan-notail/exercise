#!/bin/sh /etc/rc.common
#
# @@-COPYRIGHT-START-@@
#
# Copyright (c) 2013,2014 Qualcomm Atheros, Inc.
# All Rights Reserved.
# Qualcomm Atheros Confidential and Proprietary.
#
# @@-COPYRIGHT-END-@@
#

START=55
SERVICE_WRITE_PID=1
SERVICE_DAEMONIZE=1
SERVICE_DEBUG_OUTPUT=0
SERVICE_PATH="/usr/sbin/lbd"
LBD_CONFIG_FILE="/tmp/lbd.conf"
LBD_RUN_FILE="/var/run/.lbd"

. /lib/functions/whc-debug.sh
. /lib/functions/whc-iface.sh

__lbd_cfg_append() {
	echo "$1" >> "$LBD_CONFIG_FILE"
}

__lbd_cfg_nl_append() {
	echo "" >> "$LBD_CONFIG_FILE"
	echo "$1" >> "$LBD_CONFIG_FILE"
}

# __lbd_cfg_add_str <section> <option>
__lbd_cfg_add_str() {
	local key="$2"
	local section="$1"
	local option="$2"

	config_get val "${section}" "${option}"
	[ -n "${val}" ] && __lbd_cfg_append "${key}=${val}"
}

__lbd_cfg_add_str_new_key() {
	local section="$1"
	local option="$2"
	local newkey="$3"

	config_get val "${section}" "${option}"
	[ -n "${val}" ] && __lbd_cfg_append "${newkey}=${val}"
}

# Given two (section, key) pairs, subtract the second value from the first
# to arrive at an RSSI value and use that for the key being generated.
# This is meant to convert an RSSI on one band to an RSSI on the
# other band, albeit in such a way that is the mirror image of the estimates
# performed by lbd.
__lbd_cfg_add_rssi_est_str() {
	local basevalsection="$1"
	local basevalkey="$2"
	local adjvalsection="$3"
	local adjvalkey="$4"
	local newkey="$5"

	config_get baseval "${basevalsection}" "${basevalkey}"
	config_get adjval  "${adjvalsection}" "${adjvalkey}"
	[ -n "${baseval}" ] && [ -n "${adjval}" ] && val=`expr ${baseval} - ${adjval}`
	[ -n "${val}" ] && __lbd_cfg_append "${newkey}=${val}"
}

__lbd_cfg_add_head() {
	echo ";"	> "$LBD_CONFIG_FILE"
	__lbd_cfg_append ';  Automatically generated lbd configure file,do not change it.'
	__lbd_cfg_append ';'
	__lbd_cfg_append ';INTERFACE		wlan interface'
	__lbd_cfg_append ';WLANIF2G		wlan driver interface for 2.4 GHz band'
	__lbd_cfg_append ';WLANIF5G		wlan driver interface for 5 GHz band'
	__lbd_cfg_append ';STADB:		station database'
	__lbd_cfg_append ';STAMON:		station monitor'
	__lbd_cfg_append ';BANDMON:		band monitor'
	__lbd_cfg_append ';STEEREXEC:	steering algorithm'
	__lbd_cfg_append ';DIAGLOG:		diagnostic logging'
}

__lbd_cfg_add_interface() {
	local section="config"
	local option="MatchingSSID"
	config_get ssid "${section}" "${option}"

	local all_wlan_ifaces

	# Get a list of wlan interfaces, seperated by comma
	whc_get_wlan_ifaces all_wlan_ifaces $ssid
	__lbd_cfg_append 'WlanInterfaces='$all_wlan_ifaces
}

__lbd_create_config() {
	config_load 'lbd'
	__lbd_cfg_add_head

	__lbd_cfg_nl_append '[INTERFACE]'
	__lbd_cfg_add_interface

	__lbd_cfg_nl_append '[WLANIF2G]'
	__lbd_cfg_add_str	WlanIF2G	InactIdleThreshold
	__lbd_cfg_add_str	WlanIF2G	InactOverloadThreshold
	__lbd_cfg_add_str	WlanIF2G	InactCheckInterval
	__lbd_cfg_add_rssi_est_str	WlanIF5G_Adv	RSSISteeringPoint	StaMonitor_Adv	RSSIDiff_EstW5FromW2	InactRSSIXingThreshold
	__lbd_cfg_add_str	WlanIF2G_Adv	LowRSSIXingThreshold
	__lbd_cfg_add_str	WlanIF2G_Adv	MUCheckInterval
	__lbd_cfg_add_str	WlanIF2G_Adv	MUAvgPeriod

	 __lbd_cfg_nl_append '[WLANIF5G]'
	__lbd_cfg_add_str	WlanIF5G	InactIdleThreshold
	__lbd_cfg_add_str	WlanIF5G	InactOverloadThreshold
	__lbd_cfg_add_str	WlanIF5G	InactCheckInterval
	__lbd_cfg_add_rssi_est_str	WlanIF2G_Adv	RSSISteeringPoint	StaMonitor_Adv	RSSIDiff_EstW2FromW5	InactRSSIXingThreshold
	__lbd_cfg_add_str	WlanIF5G_Adv	LowRSSIXingThreshold
	__lbd_cfg_add_str	WlanIF5G_Adv	MUCheckInterval
	__lbd_cfg_add_str	WlanIF5G_Adv	MUAvgPeriod

	__lbd_cfg_nl_append '[STADB]'
	__lbd_cfg_add_str	StaDB		IncludeOutOfNetwork
	__lbd_cfg_add_str	StaDB_Adv	AgingSizeThreshold
	__lbd_cfg_add_str	StaDB_Adv	AgingFrequency
	__lbd_cfg_add_str	StaDB_Adv	OutOfNetworkMaxAge
	__lbd_cfg_add_str	StaDB_Adv	InNetworkMaxAge
	__lbd_cfg_add_str	StaDB_Adv	ProbeMaxInterval

	__lbd_cfg_nl_append '[STAMON]'
	__lbd_cfg_add_str	StaMonitor_Adv	RSSIMeasureSamples_W2
	__lbd_cfg_add_str	StaMonitor_Adv	RSSIMeasureSamples_W5
	__lbd_cfg_add_str_new_key	WlanIF2G_Adv	RSSISteeringPoint	InactRSSIXingThreshold_W2
	__lbd_cfg_add_str_new_key	WlanIF5G_Adv	RSSISteeringPoint	InactRSSIXingThreshold_W5
	__lbd_cfg_add_str	StaMonitor_Adv	RSSIDiff_EstW5FromW2
	__lbd_cfg_add_str	StaMonitor_Adv	RSSIDiff_EstW2FromW5
	__lbd_cfg_add_str	StaMonitor_Adv	RSSIAgeLimit
	__lbd_cfg_add_str	StaMonitor_Adv	ProbeCountThreshold

	__lbd_cfg_nl_append '[BANDMON]'
	__lbd_cfg_add_str	BandMonitor	MUReserve_W5
	__lbd_cfg_add_str	BandMonitor_Adv	MUSlightOverloadThreshold_W2
	__lbd_cfg_add_str	BandMonitor_Adv	MUHeavyOverloadThreshold_W2
	__lbd_cfg_add_str	BandMonitor_Adv	MUSlightOverloadThreshold_W5
	__lbd_cfg_add_str	BandMonitor_Adv	MUHeavyOverloadThreshold_W5
	__lbd_cfg_add_str	BandMonitor_Adv	RSSIMaxAge
	__lbd_cfg_add_str_new_key	WlanIF5G_Adv	RSSISteeringPoint	RSSIThreshold_W5
	__lbd_cfg_add_str	BandMonitor_Adv	ProbeCountThreshold

	__lbd_cfg_nl_append '[STEEREXEC]'
	__lbd_cfg_add_str	SteerExec_Adv	SteeringProhibitTime
	__lbd_cfg_add_str	SteerExec_Adv	TSteering
	__lbd_cfg_add_str	SteerExec_Adv	InitialAuthRejCoalesceTime
	__lbd_cfg_add_str	SteerExec_Adv	AuthRejMax
	__lbd_cfg_add_str	SteerExec_Adv	SteeringUnfriendlyTime
	__lbd_cfg_add_str_new_key	WlanIF2G_Adv	LowRSSIXingThreshold	LowRSSIXingThreshold_W2
	__lbd_cfg_add_str_new_key	WlanIF5G_Adv	LowRSSIXingThreshold	LowRSSIXingThreshold_W5
	__lbd_cfg_add_str	SteerExec_Adv	TargetLowRSSIThreshold_W2
	__lbd_cfg_add_str	SteerExec_Adv	TargetLowRSSIThreshold_W5
	__lbd_cfg_add_str	SteerExec_Adv	BlacklistTime

	__lbd_cfg_nl_append '[DIAGLOG]'
	__lbd_cfg_add_str	DiagLog		EnableLog
	__lbd_cfg_add_str	DiagLog		LogServerIP
	__lbd_cfg_add_str	DiagLog		LogServerPort
	__lbd_cfg_add_str	DiagLog		LogLevelWlanIF
	__lbd_cfg_add_str	DiagLog		LogLevelBandMon
	__lbd_cfg_add_str	DiagLog		LogLevelStaDB
	__lbd_cfg_add_str	DiagLog		LogLevelSteerExec
	__lbd_cfg_add_str	DiagLog		LogLevelStaMon
	__lbd_cfg_add_str	DiagLog		LogLevelDiagLog

}

# monit_register <name>
monit_register() {
	local name="$1"
	PROCESS_FOUND=0

	monit_check_process() {
		local procname
		config_get procname "$1" name
		[ "$procname" == "$2" ] || return
		PROCESS_FOUND=1
	}

	[ -f "/etc/config/monit" ] || return 1
	config_load monit
	config_foreach monit_check_process process $name

	if [ $PROCESS_FOUND -eq 0 ]; then
		uci_add monit process
		config="$CONFIG_SECTION"
		[ -n "$config" ] || return

		uci_set monit $config name "$name"
		uci_set monit $config pidfile "/tmp/run/${name}.pid"
		uci_set monit $config start "/etc/init.d/${name} restart"
		uci_set monit $config stop "/etc/init.d/${name} stop"
		uci_set monit $config group whc
		uci_commit monit
		/etc/init.d/monit reload
	fi
}

# monit_unregister <name>
monit_unregister() {
	local name="$1"
	PROCESS_REMOVED=0

	monit_remove_process() {
		local procname

		config_get procname "$1" name
		[ "$procname" == "$2" ] || return
		uci_remove monit "$1"
		uci_commit monit
		PROCESS_REMOVED=1
	}

	[ -f "/etc/config/monit" ] || return 1
	config_load monit
	config_foreach monit_remove_process process $name

	if [ $PROCESS_REMOVED -gt 0 ]; then
		/etc/init.d/monit reload
	fi
}

start() {
	whc_lock
	__stop

	config_load 'lbd'
	config_get_bool enabled config 'Enable' '0'
	local lbd_rcd_enabled=`ls /etc/rc.d/S${START}lbd 2> /dev/null`

	[ "$enabled" -gt 0 -a -n "$lbd_rcd_enabled" ] || {
		whc_unlock
		return 1
	}

	whc_echo lbd "starting daemon"
	# Create configuration file and start lbd
	__lbd_create_config
	${SVCDBG}service_start ${SERVICE_PATH} -d -C "$LBD_CONFIG_FILE"
	monit_register lbd

	touch $LBD_RUN_FILE
	whc_unlock
}

__stop() {
	monit_unregister lbd
	${SVCDBG}service_stop ${SERVICE_PATH}

	# Workaround, sometimes service_stop does not kill lbd
	start-stop-daemon -K -x ${SERVICE_PATH} -s SIGKILL > /dev/null
}

stop() {
	__stop
	config_load 'lbd'
}

restart() {
	[ -f "$LBD_RUN_FILE" ] || return
	start
}
